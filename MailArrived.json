{
  "name": "Mail Arrived",
  "nodes": [
    {
      "parameters": {
        "operation": "reply",
        "messageId": "={{ $('Get Full Thread').item.json.messages[0].id }}",
        "message": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message', ``, 'string') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        -1620,
        -1800
      ],
      "id": "96402066-8488-44d9-ac16-cdc0fd9c1226",
      "name": "Reply",
      "webhookId": "bcceb96a-9103-4769-9a0a-3bff9dcfe286",
      "credentials": {
        "gmailOAuth2": {
          "id": "l6FLmcnty93cD3Zw",
          "name": "Ashley Gmail"
        }
      }
    },
    {
      "parameters": {
        "resource": "thread",
        "operation": "get",
        "threadId": "={{ $json.threadId }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -3780,
        -2160
      ],
      "id": "ae9aea11-05a6-4413-bfc9-b89e180acc08",
      "name": "Get Full Thread1",
      "webhookId": "7c367aa6-9325-4fbf-bd8a-7200ba2e0c70",
      "credentials": {
        "gmailOAuth2": {
          "id": "l6FLmcnty93cD3Zw",
          "name": "Ashley Gmail"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -3540,
        -2360
      ],
      "id": "72ffff89-3618-4cf1-ae52-3f80e94c4f5e",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "3TzaS2wjqJrAozWL",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1800,
        -1840
      ],
      "id": "a89392fd-6c05-4a1c-a951-dbe3e5a587bf",
      "name": "OpenAI Chat Model5",
      "credentials": {
        "openAiApi": {
          "id": "3TzaS2wjqJrAozWL",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "sid.mathur@gmail.com",
          "mode": "list",
          "cachedResultName": "sid.mathur@gmail.com"
        },
        "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
        "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
        "additionalFields": {
          "attendees": [
            "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('attendees0_Attendees', ``, 'string') }}"
          ],
          "description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Description', ``, 'string') }}",
          "summary": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Summary', ``, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        -2000,
        -2140
      ],
      "id": "a00e7f6f-e358-452d-b92d-dde3aaf0a2c5",
      "name": "Send Invite1",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "LFlgMde9BXmD8Wd0",
          "name": "Sids Google Calendar"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are being provided with an email thread. Your job is to determine whether this email thread requires action on the part of Ashley, Sid's calendar assistant. Understand the full context of the thread to determine whether Ashley needs to take an action. If so, help Ashley with understanding the context of the action they need to take. If Ashley does not need to take any action, you don't need to provide additional context.\n\nEach mail in the email thread contains information about the sender, recipients, subject, content. It also contains a field called internalDate - a higher value of internalDate indicates a more recent response. \n\nAny meeting request should include meeting participants. If the participant is not clear, assume the sender of the mail is the requestor. The meeting request thread may also include EAs (executive assistants). Do your best to distinguish EAs from the participants. EAs do not need to be invited to meetings, but they will help confirm meeting times for their participants. \n\n***BE DELIBERATE AND THOUGHTFUL WHILE INTERPRETING TIMES***\nTreat all dates in pacific time zone, unless otherwise specified. If another time zone is specified, convert all mentions of dates to pacific time zone before procceding. Your responses should only contain pacific time zone.\n\nThe working week starts Monday and ends Friday. Today falls into the current week. Next week starts on the following Monday. \n\nToday's date is {{ new Date().toLocaleDateString(\"en-US\", { timeZone: \"America/Los_Angeles\", weekday: \"short\", month: \"short\", day: \"numeric\", year: \"numeric\" }).replace(/,/g, '') }}.\n\n\nRespond in the following format\n\n{\n  \"action_needed\": <boolean, true if Ashley needs to find a common meeting time, false if not>,\n  \"request_type\": \"<string, \"does_time_work\" if specific meetting times are suggested in the conversation, \"suggest_time\" if the conversation is requesting that you suggest specific time slots, \"book_time\" if the conversation is requesting to book the time>,\n  \"requestor\": \"<string, name of person who originally requested the meeting\">,\n  \"time_slots_requested\": \"<string, if request type is \"does_time_work\", what time slots are suggested>\",\n  \"meeting_duration\": \"<string, how long is being requested>\",\n  \"timerange_start\": \"<string, the earliest datetime being considered for the meeting formatted as YYYY-mm-dd hh:mm>\",\n  \"timerange_end\": \"<Date, the latest datetime being considered for the meeting formatted as YYYY-mm-dd hh:mm>\",\n  \"participants\": \"<string, who needs to be included in the meeting - list of emails addresses. Do not include Sid (sid.mathur@gmail.com).\">,\n  \"executive_assistants\": \"<string, who are the EAs and for who - email address of EA (email address of participant). Do not include Ashley (ashley.sidsai@gmail.com)>\"\n  \"other_context\": \"<string, any additional context for the meeting>\",\n  \"todays_date\": \"<string, todays date>\",\n  \"first_day_of_next_week\": \"<string, date>\"\n}\n\nDo not output anything other than this well formatted JSON.\n\nHere is the full conversation thread:\n{{ $input.item.json.messages.map(msg => `From: ${msg.From}\\nTo: ${msg.To}\\nCc: ${msg.Cc}\\ninternalDate: ${msg.internalDate}\\nSubject: ${msg.Subject}\\nContent: ${msg.textPlain || msg.snippet}\\n---`).join('\\n') }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -3540,
        -2160
      ],
      "id": "46b7f3da-ba25-4cb7-95d8-205d07943b7f",
      "name": "Extract Request Information1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "66be83d1-1555-4ef9-b67f-4431a50ec225",
              "leftValue": "={{ $json.from }}",
              "rightValue": "ashley.sidsai@gmail.com",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3940,
        -2160
      ],
      "id": "3c746ed0-f793-4f94-a991-8c4d8ea0ee27",
      "name": "Don't reply to self1"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "filters": {
          "sender": ""
        }
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -4080,
        -2160
      ],
      "id": "4392ecfb-0a3d-49a6-bf1d-9af50f915606",
      "name": "On new mail1",
      "credentials": {
        "gmailOAuth2": {
          "id": "l6FLmcnty93cD3Zw",
          "name": "Ashley Gmail"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  return {\n    json: JSON.parse(item.json.output)\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3280,
        -2160
      ],
      "id": "ae8ad32c-5ac1-4211-9eb7-d012b019cfcd",
      "name": "Parse into fields1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e812b0a3-e598-4e1d-9eb0-ed15889627a5",
              "leftValue": "={{ $json.action_needed }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -3140,
        -2160
      ],
      "id": "b015b975-c01b-4b68-9337-f1b0b5339038",
      "name": "If action needed1"
    },
    {
      "parameters": {
        "jsCode": "const requestInfo = $('If action needed1').all()\nconst calendarData = $('Search Availability1').all()\n\n// Formatter: short time, 12hr, with date\nconst formatter = new Intl.DateTimeFormat('en-US', {\n  year: 'numeric',\n  month: '2-digit',\n  day: '2-digit',\n  hour: 'numeric',\n  minute: '2-digit',\n  hour12: true,\n  timeZone: 'America/Los_Angeles'\n});\n\n// Format function to YYYY-MM-DD h:mm AM/PM\nfunction formatDate(datetimeStr) {\n  const date = new Date(datetimeStr);\n  const parts = formatter.formatToParts(date);\n\n  const datePart = `${parts.find(p => p.type === 'year').value}-${parts.find(p => p.type === 'month').value}-${parts.find(p => p.type === 'day').value}`;\n  const timePart = `${parts.find(p => p.type === 'hour').value}:${parts.find(p => p.type === 'minute').value} ${parts.find(p => p.type === 'dayPeriod').value}`;\n\n  return `${datePart} ${timePart}`;\n}\n\nreturn [\n  {\n    json: {\n      ...requestInfo[\"0\"].json,\n      schedule: calendarData.map(item => {\n        return {\n          start: formatDate(item.json.start.dateTime),\n          end: formatDate(item.json.end.dateTime)\n        };\n      })\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2760,
        -2160
      ],
      "id": "3698dcfc-7f69-4cff-bd38-33216bfdabb8",
      "name": "Code2"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "sid.mathur@gmail.com",
          "mode": "list",
          "cachedResultName": "sid.mathur@gmail.com"
        },
        "returnAll": true,
        "timeMin": "={{ $json.timerange_start }}",
        "timeMax": "={{ $json.timerange_end }}",
        "options": {
          "fields": "items(summary, start, end)",
          "orderBy": "startTime",
          "recurringEventHandling": "expand"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -3020,
        -2040
      ],
      "id": "3e93cbac-2386-4c12-8cb1-9496649e2969",
      "name": "Search Availability1",
      "alwaysOutputData": false,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "LFlgMde9BXmD8Wd0",
          "name": "Sids Google Calendar"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.request_type }}",
                    "rightValue": "book_time",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "0499f3cf-ae1c-4e16-ba84-c9abf99c3a31"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Book Time"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "09fd93a8-d14b-4036-aacf-75c6e39bbe7c",
                    "leftValue": "={{ $json.request_type }}",
                    "rightValue": "suggest_time",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Suggest Time"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "51b7a1a0-b810-4210-b9ac-6d12b68b4cd0",
                    "leftValue": "={{ $json.request_type }}",
                    "rightValue": "=does_time_work",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Does Time Work"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2540,
        -2160
      ],
      "id": "1a9fb040-3fc9-453f-8792-d412a2a501a8",
      "name": "Switch"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Check if the Sid's calendar shows him as available for the entire Requested Meeting Duration during the Requested Time Slots. If so, send an invite to the participants with the appropriate subject and context. Make sure that the invite start and end times are fully included within the Requested Time Slots and that the length of the meeting is equal to the Requested Meeting Duration.\n\nSid *DOES NOT* like to have meetings that start before 9am or end after 6pm.\n\nRespond with the following \n{\n  \"action_taken\": \"<string, \"sent_invite\" if the time worked and invite was sent, \"conflict\" if the time did not work and invite was not sent, \"error\" if the invite was not sent for some other reason>\",\n  \"reason_for_action\": \"<string, why did you take the action>\",\n  \"other_context\": \"<string, any additional context>\"\n}\n\nHere are the user's request details. \n\nMeeting Participants: {{ $json.participants }}\nRequested Meeting Duration: {{ $json.meeting_duration }}\nRequested Time Slots: {{ $json.time_slots_requested }}\nTime Range: {{ $json.timerange_start }} to {{ $json.timerange_end }}\nOther Context: {{ $json.other_context }}\n\nHere are the events on Sid's Calendar during this time: Each item on the calendar represents busy time during which Sid is not available.\n\n{{ $json.schedule.toJsonString() }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -2300,
        -2280
      ],
      "id": "5546994c-2c80-46be-819d-e70a4d6baf85",
      "name": "Book Time Action"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Check Sid's calendar to determine available time slots that can accomodate the entire Requested Meeting Duration. Unless specified, assume that the requested time slots are in Pacific Time. If explicitly specified and different from Pacific time, convert them to Pacific Time first, then check Sid's calendar.\n\nSid *DOES NOT* like to have meetings that start before 9am or end after 6pm.\n\nRespond with the following \n{\n  \"available_time_slots\": \"<string, a list of time slots that work, or empty if nothing found>\",\n  \"reason_for_action\": \"<string, why did you take the action>\",\n  \"other_context\": \"<string, any additional context>\"\n}\n\n\nToday is {{ new Date() }}.\n\nHere are the user's request details. \n\nMeeting Participants: {{ $json.participants }}\nRequested Meeting Duration: {{ $json.meeting_duration }}\nTime Range: {{ $json.timerange_start }} to {{ $json.timerange_end }}\nOther Context: {{ $json.other_context }}\n\nHere are the events on Sid's Calendar during this time: Each item on the calendar represents busy time during which Sid is not available. The start and end dateTimes are in Sid's local time zone. \n\n{{ $json.schedule.toJsonString() }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -2300,
        -2000
      ],
      "id": "b06bf11b-743e-4d05-ab6b-ed8f779b1659",
      "name": "Suggest Time Action"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Check Sid's calendar to determine if he is available for the Requested Meeting Duration during the Requested Time Slots. Unless specified, assume that the requested time slots are in Pacific Time. If explicitly specified and different from Pacific time, convert them to Pacific Time first, then check Sid's calendar.\nIf unable to fulfill the request with the requested time slots, suggest other calendar availability that might satisfy the requested meeting duration.\n\nSid *DOES NOT* like to have meetings that start before 9am or end after 6pm.\n\nRespond with the following \n{\n  \"available_time_slots\": \"<string, a list of time slots that work, or empty if nothing found>\",\n  \"alternate_time_slots\": \"<string, suggested alternate slots if no available slots could be found\"\n  \"reason_for_action\": \"<string, why did you take the action>\",\n  \"other_context\": \"<string, any additional context>\"\n}\n\n\nToday is {{ new Date() }}.\n\nHere are the user's request details. \n\nMeeting Participants: {{ $json.participants }}\nRequest Type: {{ $json.request_type }}\nRequested Meeting Duration: {{ $json.meeting_duration }}\nRequested Time Slots: {{ $json.time_slots_requested }}\nTime Range: {{ $json.timerange_start }} to {{ $json.timerange_end }}\nOther Context: {{ $json.other_context }}\n\nHere are the events on Sid's Calendar during this time: Each item on the calendar represents busy time during which Sid is not available. The start and end dateTimes are in Sid's local time zone. \n\n{{ $json.schedule.toJsonString() }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -2300,
        -1700
      ],
      "id": "c9a50fc0-22a8-4e61-9ca9-b238261ff315",
      "name": "Does Time Work Action"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "01330e94-8be1-4009-9072-8c0aa55d745e",
              "name": "messages[0].Subject",
              "value": "\"Sid's availability over the next week\"",
              "type": "string"
            },
            {
              "id": "bc92b761-de03-45a5-91b8-4854585bbd94",
              "name": "messages[0].snippet",
              "value": "\"The SVP - karmen@sid.com - needs to meet with Sid for 2 hours next week. She can only meet 5pm-7pm EST.  Please suggest time slots\"",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3660,
        -1880
      ],
      "id": "bc2c8741-a690-4324-92ca-5b1445435a93",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are Ashley, the personal calendar assistant to Sid. You are responding to the person(s) who needs time with Sid (or who Sid needs time with) with courtesy and empathy. Address the person by their first name. Be clear and concise in your responses. **DO NOT** share any information about Sid's calendar other than acceptable times. If the schedule necessitates searching over multiple dates, include tables for easy consumption. Sign off with the signature \"Best Regards, Ashley, Sid's Personal AI Assistant (I just joined and am ramping up, so please forgive my errors)\". Author your response in HTML.\n\nTake actions based on the Request Type:\n1. book_time: check if the specific time is available on Sid's calendar. If so, send an invite to the participants for that time with the appropriate subject and context. Reply back on the email thread to close the loop.\n2. suggest_time: check for available times in the provided time range and reply back on the email thread.\n3. does_time_work: check Sid's calendar during the suggested time slots. If the entire time slot is available, the proposed slot works. If the entire time slot is not available, but there is enough free time within that slot to accomodate the meeting duration, propose the free time within the slot. Reply back on the email thread with clarity on which times work and which don't.   \n\nTo reply to the mail thread use the \"Reply\" tool. \n\nTo send calendar invites, use the \"Send Invite\" tool.\n\nSid *DOES NOT* like to have meetings before 9am and after 6pm Pacific.\n\nToday is {{ new Date() }}.\n\nHere are the user's request details. \n\nMeeting Participants: {{ $json.participants }}\nRequest Type: {{ $json.request_type }}\nRequested Meeting Duration: {{ $json.meeting_duration }}\nRequested Time Slots: {{ $json.time_slots_requested }}\nTime Range: {{ $json.timerange_start }} to {{ $json.timerange_end }}\nOther Context: {{ $json.other_context }}\n\nHere are the events on Sid's Calendar during this time: Each item on the calendar represents busy time during which Sid is not available. The start and end dateTimes are in Sid's local time zone. \n\n{{ $json.schedule.toJsonString() }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1720,
        -2020
      ],
      "id": "4fe5b43a-c5f0-4f94-9997-2aca13c1f86e",
      "name": "Reply to Email Action"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -2880,
        -2160
      ],
      "id": "f3003729-6fdb-435e-86f8-9a4e5157acf1",
      "name": "Merge"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "01330e94-8be1-4009-9072-8c0aa55d745e",
              "name": "request_type",
              "value": "does_time_work",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2640,
        -1900
      ],
      "id": "b21b314f-8701-475e-9df5-0ee04116cca7",
      "name": "Edit Fields1"
    }
  ],
  "pinData": {},
  "connections": {
    "Reply": {
      "ai_tool": [
        [
          {
            "node": "Reply to Email Action",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Full Thread1": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Extract Request Information1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Book Time Action",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Suggest Time Action",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Does Time Work Action",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Send Invite1": {
      "ai_tool": [
        [
          {
            "node": "Book Time Action",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Extract Request Information1": {
      "main": [
        [
          {
            "node": "Parse into fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Don't reply to self1": {
      "main": [
        [
          {
            "node": "Get Full Thread1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On new mail1": {
      "main": [
        [
          {
            "node": "Don't reply to self1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse into fields1": {
      "main": [
        [
          {
            "node": "If action needed1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If action needed1": {
      "main": [
        [
          {
            "node": "Search Availability1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Availability1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Book Time Action",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Suggest Time Action",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Does Time Work Action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Extract Request Information1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Book Time Action": {
      "main": [
        []
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "executionTimeout": -1
  },
  "versionId": "52264d6f-d8a8-47bf-8919-8f6adfd7bc71",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "617ae5ca711d221757e21f169809b1f528562a8e72f2a8aca107d2e9922468db"
  },
  "id": "KnGcoAtMUtw8uaOe",
  "tags": []
}