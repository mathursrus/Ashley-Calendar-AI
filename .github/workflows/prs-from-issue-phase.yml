name: PRs from Issue Phase & Status
on:
  issues:
    types: [labeled, unlabeled]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  route:
    if: startsWith(github.event.label.name, 'phase:') || github.event.label.name == 'status:wip' || github.event.label.name == 'status:needs-review'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Derive branch/base/slug
        id: vars
        shell: bash
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE:  ${{ github.event.issue.title }}
          BASE:         ${{ github.event.repository.default_branch }}
        run: |
          slug=$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g;s/^-+|-+$//g')
          echo "slug=$slug" >> $GITHUB_OUTPUT
          echo "branch=feature/${ISSUE_NUMBER}-${slug}" >> $GITHUB_OUTPUT
          echo "base=${BASE:-master}" >> $GITHUB_OUTPUT
          echo "label=${{ github.event.label.name }}" >> $GITHUB_OUTPUT

      - name: Ensure branch exists (from base)
        env: 
            BR: ${{ steps.vars.outputs.branch }}
            BASE: ${{ steps.vars.outputs.base }}
        run: |
          git fetch origin "$BASE"
          if git ls-remote --exit-code --heads origin "$BR" >/dev/null 2>&1; then
            git switch -C "$BR" --track "origin/$BR"
          else
            git switch -C "$BR" "origin/$BASE"
            git push -u origin "$BR"
          fi

      - name: Auth gh
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      # ----- PHASE HANDLERS -----
      - name: Phase - Design → ensure Draft Design PR (with RFC stub incl. Test Plan)
        if: startsWith(steps.vars.outputs.label, 'phase:design')
        env:
          ISSUE:  ${{ github.event.issue.number }}
          BRANCH: ${{ steps.vars.outputs.branch }}
          BASE:   ${{ steps.vars.outputs.base }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          mkdir -p docs/rfcs
          RFC="docs/rfcs/${ISSUE}-${{ steps.vars.outputs.slug }}.md"
          sed -i "s/<ISSUE>/${ISSUE}/" "$RFC"
          git add "$RFC"
          git commit -m "docs(rfc): stub (incl. Test Plan) for #${ISSUE}"
          git push
          PR=$(gh pr list --state open --head "$BRANCH" --json number --jq '.[0].number')
          if [ -z "$PR" ]; then
            gh pr create \
              --title "RFC: $BRANCH" \
              --body  "Linked issue: #$ISSUE. Design doc includes the initial **Test Plan**." \
              --base  "$BASE" \
              --head  "$BRANCH" \
              --draft
            PR=$(gh pr list --state open --head "$BRANCH" --json number --jq '.[0].number')
          fi
          gh pr edit "$PR" --add-label "type:design" --add-label "status:wip"

      - name: Phase - Tests → ensure Draft Tests PR (tests-only)
        if: startsWith(steps.vars.outputs.label, 'phase:tests')
        env:
          ISSUE:  ${{ github.event.issue.number }}
          BRANCH: ${{ steps.vars.outputs.branch }}
          BASE:   ${{ steps.vars.outputs.base }}
        run: |
          set -euo pipefail
          # Create an empty diverging commit if necessary so PR can open
          if git diff --quiet "origin/${BASE}"; then
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit --allow-empty -m "chore(tests): enter tests phase for #${ISSUE}"
            git push
          fi
          PR=$(gh pr list --state open --head "$BRANCH" --json number --jq '.[0].number')
          if [ -z "$PR" ]; then
            gh pr create \
              --title "Tests: $BRANCH" \
              --body  "Tests for #$ISSUE. **No app code changes** in this PR." \
              --base  "$BASE" \
              --head  "$BRANCH" \
              --draft
            PR=$(gh pr list --state open --head "$BRANCH" --json number --jq '.[0].number')
          fi
          gh pr edit "$PR" --add-label "type:tests" --add-label "status:wip"

      - name: Phase - Implementation → ensure Draft Implementation PR
        if: startsWith(steps.vars.outputs.label, 'phase:impl')
        env:
          ISSUE:  ${{ github.event.issue.number }}
          BRANCH: ${{ steps.vars.outputs.branch }}
          BASE:   ${{ steps.vars.outputs.base }}
        run: |
          set -euo pipefail
          # Create an empty diverging commit if necessary so PR can open
          if git diff --quiet "origin/${BASE}"; then
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit --allow-empty -m "chore(impl): enter implementation phase for #${ISSUE}"
            git push
          fi
          PR=$(gh pr list --state open --head "$BRANCH" --json number --jq '.[0].number')
          if [ -z "$PR" ]; then
            gh pr create \
              --title "Implementation: $BRANCH" \
              --body  "Implementation for #$ISSUE. Closes #$ISSUE" \
              --base  "$BASE" \
              --head  "$BRANCH" \
              --draft
            PR=$(gh pr list --state open --head "$BRANCH" --json number --jq '.[0].number')
          fi
          gh pr edit "$PR" --add-label "type:implementation" --add-label "status:wip"

      # ----- STATUS HANDLERS -----
      - name: Status - WIP → Draft PR
        if: github.event.label.name == 'status:wip'
        env:
          BRANCH: ${{ steps.vars.outputs.branch }}
        run: |
          PR=$(gh pr list --state open --head "$BRANCH" --json number --jq '.[0].number')
          if [ -n "$PR" ]; then
            gh pr ready "$PR" --undo
            gh pr edit "$PR" --add-label "status:wip"
          fi

      - name: Status - Needs Review → Ready for Review PR
        if: github.event.label.name == 'status:needs-review'
        env:
          BRANCH: ${{ steps.vars.outputs.branch }}
        run: |
          PR=$(gh pr list --state open --head "$BRANCH" --json number --jq '.[0].number')
          if [ -n "$PR" ]; then
            gh pr ready "$PR"
            gh pr edit "$PR" --add-label "status:needs-review" --remove-label "status:wip"
          fi