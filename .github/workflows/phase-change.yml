name: Phase Change → Ensure Branch + Draft PR

on:
  issues:
    types: [labeled]

permissions:
  contents: write
  pull-requests: write
  issues: write

# Serialize per ISSUE; do not cancel in-flight phase runs
concurrency:
  group: phase-change-${{ github.event.issue.number }}
  cancel-in-progress: false

jobs:
  phase-change:
    if: startsWith(github.event.label.name, 'phase:')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Auth gh
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Derive names
        id: vars
        shell: bash
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE:  ${{ github.event.issue.title }}
          BASE:         ${{ github.event.repository.default_branch }}
        run: |
          set -euo pipefail
          slug=$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g;s/^-+|-+$//g')
          echo "slug=$slug" >> $GITHUB_OUTPUT
          echo "branch=feature/${ISSUE_NUMBER}-${slug}" >> $GITHUB_OUTPUT
          echo "base=${BASE:-master}" >> $GITHUB_OUTPUT
          echo "phase=${{ github.event.label.name }}" >> $GITHUB_OUTPUT

      - name: Ensure branch exists (from base)
        shell: bash
        env:
          BR:   ${{ steps.vars.outputs.branch }}
          BASE: ${{ steps.vars.outputs.base }}
        run: |
          set -euo pipefail
          git fetch origin
          if git show-ref --verify --quiet "refs/heads/$BR"; then
            git switch "$BR"
          else
            git switch -c "$BR" "origin/$BASE"
          fi
          git push -u origin "$BR"

      # Design: add EMPTY RFC placeholder to guarantee a diff
      - name: phase:design → ensure empty RFC placeholder (commit if missing)
        if: steps.vars.outputs.phase == 'phase:design'
        shell: bash
        env:
          ISSUE: ${{ github.event.issue.number }}
          SLUG:  ${{ steps.vars.outputs.slug }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          mkdir -p docs/rfcs
          RFC="docs/rfcs/${ISSUE}-${SLUG}.md"
          if [ ! -f "$RFC" ]; then
            : > "$RFC"   # empty file as placeholder
            git add "$RFC"
            git commit -m "docs(rfc): placeholder for #${ISSUE}"
            git push
          fi

      # For tests/impl phases, create PR even if no diff yet (empty commit)
      - name: phase:tests/impl → ensure diverging commit if needed
        if: steps.vars.outputs.phase == 'phase:tests' || steps.vars.outputs.phase == 'phase:impl'
        shell: bash
        run: |
          set -euo pipefail
          if git diff --quiet "origin/${{ steps.vars.outputs.base }}"; then
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit --allow-empty -m "chore: enter ${{ steps.vars.outputs.phase }} for #${{ github.event.issue.number }}"
            git push
          fi

      - name: Ensure single Draft PR exists (idempotent + retry)
        id: ensure_pr
        shell: bash
        env:
          BRANCH: ${{ steps.vars.outputs.branch }}
          BASE:   ${{ steps.vars.outputs.base }}
          ISSUE:  ${{ github.event.issue.number }}
        run: |
          set -euo pipefail
          PR=$(gh pr list --state open --head "$BRANCH" --json number --jq '.[0].number')
          if [ -z "$PR" ]; then
            for i in 0 2 4 6 8; do
              if gh pr create \
                --title "$BRANCH" \
                --body  "Linked issue: #$ISSUE" \
                --base  "$BASE" \
                --head  "$BRANCH" \
                --draft; then
                break
              fi
              echo "gh pr create failed; retrying in ${i}s…"
              sleep $i
            done
            PR=$(gh pr list --state open --head "$BRANCH" --json number --jq '.[0].number')
          fi
          echo "pr=$PR" >> $GITHUB_OUTPUT

      - name: Label PR with current phase + WIP
        shell: bash
        env:
          PR: ${{ steps.ensure_pr.outputs.pr }}
          PH: ${{ steps.vars.outputs.phase }}
        run: |
          set -euo pipefail
          [ -z "$PR" ] && exit 0
          # Normalize: keep one of type:design/tests/feature based on latest phase
          case "$PH" in
            phase:design) gh pr edit "$PR" --add-label "type:design"  --remove-label "type:tests" --remove-label "type:feature" ;;
            phase:tests)  gh pr edit "$PR" --add-label "type:tests"   --remove-label "type:design" --remove-label "type:feature" ;;
            phase:impl)   gh pr edit "$PR" --add-label "type:feature" --remove-label "type:design" --remove-label "type:tests" ;;
          esac
          gh pr edit "$PR" --add-label "status:wip" --remove-label "status:needs-review" || true

      - name: Normalize ISSUE status to WIP (authoritative)
        run: gh issue edit ${{ github.event.issue.number }} --add-label "status:wip" --remove-label "status:needs-review" || true
