/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

const fileMap = {
  
  "ashley_calendar_assistant.baml": "enum AshleyAction {\r\n  BookTime\r\n  SuggestTimes\r\n  AskForClarification\r\n  NoAction\r\n}\r\n\r\n\r\n\r\nclass AshleyResponse {\r\n  /// The action Ashley should take\r\n  action AshleyAction\r\n  \r\n  /// Notes about any conflicts found in the calendar intent\r\n  conflict_notes string\r\n  \r\n  /// The email response Ashley should send to the requestor\r\n  email_response string\r\n  \r\n  /// Whether a calendar invite should be sent\r\n  send_calendar_invite bool\r\n  \r\n  /// Subject line for the calendar invite (if applicable)\r\n  calendar_invite_subject string\r\n  \r\n  /// Meeting start time in YYYY-mm-dd hh:mm format (Pacific Time)\r\n  meeting_start_time string\r\n  \r\n  /// Meeting end time in YYYY-mm-dd hh:mm format (Pacific Time)\r\n  meeting_end_time string\r\n  \r\n  /// Meeting duration in minutes\r\n  meeting_duration_minutes int\r\n  \r\n  /// List of participants to invite (comma-separated email addresses)\r\n  participants_to_invite string\r\n  \r\n  /// Meeting description/agenda\r\n  meeting_description string\r\n}\r\n\r\nfunction AshleyCalendarAssistant(\r\n  calendar_intent: CalendarIntent,\r\n  sid_calendar_data: string\r\n) -> AshleyResponse {\r\n  client CustomSonnet\r\n  prompt #\"\r\n  # ***YOUR GOAL***\r\n  You are Ashley, Sid's calendar assistant. You need to understand the meeting request, check Sid's availability, and respond appropriately.\r\n  \r\n  # ***ASHLEY'S PERSONALITY***\r\n  - Professional and efficient\r\n  - Warm and helpful tone\r\n  - Always double-checks details before taking action\r\n  - Provides clear, actionable responses\r\n  - Respects Sid's time and preferences\r\n  \r\n  # ***PROCESS***\r\n  1. Understand the request from the calendar intent\r\n  2. Check Sid's calendar availability for the requested time period\r\n  3. Determine if the requested times work or if alternatives are needed\r\n  4. Generate a polite, professional email response\r\n  5. If booking time, provide calendar invite details\r\n  \r\n  # ***AVAILABLE ACTIONS***\r\n  - NoAction: If it is clear that someone else will take (or has taken) an action ***AND*** that action does not cause a conflict on Sid's calendar. In such as case, neither an email response nor a calendar invite should be included.\r\n  - AskForClarification: When critical information is missing (duration, participants, time preferences). Do NOT book or suggest times when asking for clarification.\r\n  - BookTime: If the booking request is directed towards Ashley, and Sid is available for the requested time slots and duration. ONLY book when explicitly asked to schedule/book a meeting.\r\n  - SuggestTimes: If the request is not about booking time but discovering availability. If the request is for specific time slots and Sid is not available for requested slots, suggest alternatives. Note the time and reason for conflicts in the conflict_notes field. **ALSO use SuggestTimes when there is a scheduling conflict in an informational message, to suggest alternative times.**\r\n  \r\n\r\n  # ***IMPORTANT: WHEN NOT TO TAKE ACTION***\r\n  - If the request is informational (FYI, \"I am sending an invite\", \"I've already scheduled\"), do NOT book time or send calendar invites\r\n  - If another EA is handling the scheduling, do NOT book time or send calendar invites\r\n  - If the request explicitly states \"no action needed from you\", do NOT book time or send calendar invites\r\n  - In these cases, only acknowledge the information and confirm availability if asked\r\n  \r\n \r\n  # ***CALENDAR ANALYSIS RULES***\r\n  - All times should be in Pacific Time\r\n  - A time slot is available if and only if Sid does not have existing meetings during the entire time slot\r\n  - If requested slots are unavailable, suggest the best alternatives\r\n  \r\n  # ***EMAIL RESPONSE GUIDELINES***\r\n  - Start with a warm greeting using the first name of the requestor\r\n  - Clearly state what you're doing (booking, suggesting alternatives, or asking for clarification)\r\n  - Be specific about times, dates, and participants\r\n  - If booking, confirm all details and mention the calendar invite\r\n  - If suggesting alternatives, provide 2-3 good options with specific times\r\n  - If asking for clarification, be specific about what information is needed\r\n  - **DO NOT** share any information about Sid's calendar other than acceptable times. \r\n  - If the schedule necessitates searching over multiple dates, include tables for easy consumption. \r\n  - Keep the tone warm and efficient\r\n  - Sign off with the signature \"Best Regards, Ashley, Sid's Personal AI Assistant (I am still ramping up, so please forgive my errors)\"\r\n  \r\n  # ***ACTION SELECTION RULES***\r\n  - Use BookTime when:\r\n    * Explicitly asked to \"schedule\", \"book\", \"set up\", or \"please schedule\" a meeting AND Sid is available\r\n    * The request includes specific meeting parameters (duration, date, participants) and asks to \"find\" or \"get\" a slot\r\n  - Use SuggestTimes when:\r\n    * Asked to \"check availability\", \"suggest times\", or when Sid is not available for requested slots\r\n    * The request asks for availability suggestions rather than direct booking\r\n  - Use AskForClarification when critical details are missing (duration, time range, participants)\r\n  - For informational requests (FYI, already scheduled), use AskForClarification and set send_calendar_invite to false\r\n  \r\n  # ***CALENDAR INVITE DETAILS (when booking)***\r\n  - Only provide calendar invite details when actually booking confirmed times\r\n  - Use a clear, descriptive subject line\r\n  - Include meeting description/agenda if provided\r\n  - Ensure start/end times are within requested slots\r\n  - Verify meeting duration matches the request\r\n  - Include only the participants, not the executive assistants or silent observers\r\n\r\n\r\n  # ***OUTPUT FORMAT***\r\n  {{ ctx.output_format }}\r\n  \r\n  # ***INPUT DATA***\r\n  Calendar Intent: {{ calendar_intent }}\r\n  Sid's Calendar Data: {{ sid_calendar_data }}\r\n  \"#\r\n}\r\n\r\ntest ashley_booking_test {\r\n  functions [AshleyCalendarAssistant]\r\n  args {\r\n    calendar_intent {\r\n      action_needed true\r\n      requestor \"john@example.com\"\r\n      participants \"gus@example.com\"\r\n      executive_assistants \"john@example.com\"\r\n      silent_observers \"\"\r\n      timerange_start \"2025-08-04 15:00\"\r\n      timerange_end \"2025-08-06 15:00\"\r\n      request_details \"I'm Gus's EA and want to book time with Sid. Please book sometime on both Mon and Wed next week at 3pm for 30 mins? I'd like to discuss the Q4 project updates.\"\r\n    }\r\n    sid_calendar_data #\"\r\nMonday, August 4, 2025:\r\n- 9:00 AM - 10:00 AM: Team Standup\r\n- 2:00 PM - 3:30 PM: Product Review\r\n- 4:00 PM - 5:00 PM: Available\r\n\r\nWednesday, August 6, 2025:\r\n- 10:00 AM - 11:00 AM: Client Meeting\r\n- 2:00 PM - 2:30 PM: Available\r\n- 3:00 PM - 4:00 PM: Available\r\n- 4:30 PM - 5:30 PM: Strategy Session\r\n    \"#\r\n  }\r\n}\r\n\r\ntest ashley_suggest_times_test {\r\n  functions [AshleyCalendarAssistant]\r\n  args {\r\n    calendar_intent {\r\n      action_needed true\r\n      requestor \"sarah@company.com\"\r\n      participants \"sarah@company.com\"\r\n      executive_assistants \"\"\r\n      silent_observers \"\"\r\n      timerange_start \"2025-08-04 10:00\"\r\n      timerange_end \"2025-08-08 16:00\"\r\n      request_details \"I'd like to schedule a 1-hour meeting to discuss the new project timeline. I'm available any time next week between 10 AM and 4 PM.\"\r\n    }\r\n    sid_calendar_data #\"\r\nMonday, August 4, 2025:\r\n- 9:00 AM - 11:00 AM: Back-to-back meetings\r\n- 11:30 AM - 12:30 PM: Available\r\n- 2:00 PM - 4:00 PM: Available\r\n\r\nTuesday, August 5, 2025:\r\n- 10:00 AM - 12:00 PM: Available\r\n- 2:00 PM - 3:00 PM: Available\r\n\r\nWednesday, August 6, 2025:\r\n- 10:00 AM - 11:00 AM: Client Meeting\r\n- 1:00 PM - 4:00 PM: Available\r\n    \"#\r\n  }\r\n}\r\n\r\ntest ashley_clarification_test {\r\n  functions [AshleyCalendarAssistant]\r\n  args {\r\n    calendar_intent {\r\n      action_needed true\r\n      requestor \"mike@startup.com\"\r\n      participants \"mike@startup.com\"\r\n      executive_assistants \"\"\r\n      silent_observers \"\"\r\n      timerange_start \"2025-07-29 00:00\"\r\n      timerange_end \"2025-08-05 23:59\"\r\n      request_details \"I'd like to catch up sometime soon. Let me know when you're free.\"\r\n    }\r\n    sid_calendar_data #\"\r\nCurrent week and next week calendar data available\r\n    \"#\r\n  }\r\n} ",
  "calendar_intent.baml": "\r\n\r\nclass CalendarIntent {\r\n  /// Whether this message requires a calendar action\r\n  action_needed bool\r\n  \r\n  /// Name of person who originally requested the meeting\r\n  requestor string\r\n  \r\n  /// Who needs to be included in the meeting - list of email addresses. Do not include Sid (sid.mathur@gmail.com)\r\n  participants string\r\n  \r\n  /// Who are the EAs and for who - email address of EA (email address of participant). Do not include Ashley (ashley.sidsai@gmail.com)\r\n  executive_assistants string\r\n  \r\n  /// Who are the silent observers - list of email addresses. \r\n  silent_observers string\r\n  \r\n  /// The earliest datetime being considered for the meeting formatted as YYYY-mm-dd hh:mm\r\n  timerange_start string\r\n  \r\n  /// The latest datetime being considered for the meeting formatted as YYYY-mm-dd hh:mm\r\n  timerange_end string\r\n  \r\n  /// What the requestor is asking for\r\n  request_details string\r\n}\r\n\r\nfunction ExtractCalendarIntent(email_thread: string) -> CalendarIntent {\r\n    client CustomSonnet\r\n    prompt #\"\r\n    # ***YOUR GOAL***\r\n    # You are being provided with an email thread. Your job is to determine whether this email thread requires action on the part of Ashley, Sid's calendar assistant. \r\n    # Understand the full context of the thread to determine whether Ashley needs to take an action. If so, help Ashley with understanding the context of the action they need to take. \r\n    # If Ashley does not need to take any action, you don't need to provide additional context.\r\n    #\r\n    # ***CONTEXT CAPTURE***\r\n    # When extracting request_details, capture the FULL context including:\r\n    # - What times/dates DON'T work and why (constraints)\r\n    # - What times/dates DO work (availability)\r\n    # - The current proposal or request\r\n    # - Any preferences or requirements mentioned\r\n    # This helps Ashley make informed decisions about suggesting alternatives.\r\n    #\r\n    # ***CONTEXT***\r\n    # The provided email thread contains information about the sender, recipients, subject, content. It also contains date each message was sent - recent responses are at the top of the thread. \r\n    #\r\n    # ***PARTICIPANTS***\r\n    # Any meeting request should include meeting participants. At the same time, not every person in the thread has to be a participant. \r\n    # If the mail clearly lists out participants, use that list. If the participant is not clear, assume the sender of the mail is the participant. \r\n    # The meeting request could have 2 additional classes of people:\r\n    # 1. EAs: people who are not invited to the meeting, but are helping with the meeting. If the requestor is requesting on behalf of someone else and does not ask to be part of the meeting, chances are they are an EA.\r\n    # 2. Silent Observers: people who are on the thread, but are not asked to be invited to the meeting. They are not helping with the meeting, and are not interested in the meeting.\r\n    # EAs and Silent Observers are not participants.\r\n    #\r\n    # ***BE DELIBERATE AND THOUGHTFUL WHILE INTERPRETING TIMES***\r\n    # Treat all dates in pacific time zone, unless otherwise specified. If another time zone is specified, convert all mentions of dates to pacific time zone before procceding. Your responses should only contain pacific time zone.\r\n    # The working week starts Monday and ends Friday. \r\n    # \r\n    # ***CRITICAL DATE INTERPRETATION RULES***\r\n    # - Use the email date as the absolute reference point for all relative date expressions\r\n    # - \"next week\" means the week starting the Monday after the email date\r\n    # - \"this week\" means the week containing the email date\r\n    # - \"tomorrow\" means the day after the email date\r\n    # - \"next Monday\" means the Monday after the email date\r\n    # - \"next Tuesday\" means the Tuesday after the email date (could be same week or next week)\r\n    # - Always calculate relative dates based on the email date, not the current date\r\n    # - For ambiguous expressions like \"next week\", always interpret as the full week (Monday-Friday) starting the Monday after the email date\r\n    # - When a specific day is mentioned (e.g., \"next Wednesday\"), calculate which Wednesday that refers to based on the email date\r\n    #\r\n    # ***UNIX TIMESTAMP HANDLING***\r\n    # - If the email date is provided as a Unix timestamp (e.g., \"1754329721000\"), convert it to a readable date first\r\n    # - Unix timestamps represent milliseconds since January 1, 1970 UTC\r\n    # - Convert the timestamp to the corresponding date in Pacific time zone\r\n    # - Use this converted date as the reference point for all relative date expressions\r\n    #\r\n    # Example: If email date is 1754329721000 (Unix timestamp), then:\r\n    # - This converts to August 4, 2025 in Pacific time\r\n    # - \"today\" = August 4, 2025\r\n    # - \"tomorrow\" = August 5, 2025\r\n    # - \"next week\" = August 11-15, 2025 (Monday-Friday)\r\n    #\r\n    # Example: If email date is 2025-07-28 (Monday), then:\r\n    # - \"next week\" = 2025-08-04 to 2025-08-08 (Monday-Friday)\r\n    # - \"next Wednesday\" = 2025-07-30 (same week)\r\n    # - \"next Monday\" = 2025-08-04 (next week)\r\n    #\r\n    # ***OUTPUT FORMAT***\r\n    # {{ ctx.output_format }}\r\n    \r\n    # ***VALIDATION RULES***\r\n    # - Set action_needed to true if and only if there is a request for Sid's calendar *AND* Ashley needs to take action.\r\n    # - If action_needed is false, set all other fields to empty strings\r\n    # - Determine the time period over which Sid's calendar must be searched (timerange_start, timerange_end)\r\n    # - All times in timerange_start, timerange_end MUST be in YYYY-mm-dd hh:mm format and in pacific time zone\r\n    # - Requestor MUST be the first name of the person making the request\r\n    # - Participants MUST be email addresses, MUST NOT include Sid (sid.mathur@gmail.com)\r\n    # - Executive_assistants MUST be email addresses, MUST NOT include Ashley (ashley.sidsai@gmail.com)\r\n    # - Silent Observers MUST be email addresses, MUST NOT be included in participants or executive_assistants\r\n    # - All email lists (participants, executive_assistants, silent_observers) MUST be comma-separated WITHOUT spaces (e.g., \"email1@domain.com,email2@domain.com\")\r\n    #\r\n    # Here is the full conversation thread:\r\n    # \r\n    # {{email_thread}}\r\n    \"#\r\n} \r\n\r\ntest calendar_intents {\r\n  // run through all the test cases in test-cases.json\r\n  functions [ExtractCalendarIntent]\r\n  args {\r\n    email_thread #\"\r\nFrom: john@example.com\r\nTo: sid.mathur@gmail.com\r\nCc: ashley.sidsai@gmail.com\r\nDate: 2025-07-29 10:00:00\r\nSubject: Meeting Request\r\nContent: Hi Sid,\r\n\r\nI'm Gus's EA and want to book tine wiit Sid. Please book sometime on both Mon and Wed next week at 3pm for 30 mins? I'd like to discuss the Q4 project updates.\r\n\r\nThanks,\r\nJohn\r\n    \"#\r\n  }\r\n}",
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\r\n\r\nclient<llm> CustomGPT4o {\r\n  provider openai\r\n  options {\r\n    model \"gpt-4o\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomGPT4oMini {\r\n  provider openai\r\n  retry_policy Exponential\r\n  options {\r\n    model \"gpt-4o-mini\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomSonnet {\r\n  provider anthropic\r\n  options {\r\n    model \"claude-3-5-sonnet-20241022\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n\r\nclient<llm> CustomHaiku {\r\n  provider anthropic\r\n  retry_policy Constant\r\n  options {\r\n    model \"claude-3-haiku-20240307\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\r\nclient<llm> CustomFast {\r\n  provider round-robin\r\n  options {\r\n    // This will alternate between the two clients\r\n    strategy [CustomGPT4oMini, CustomHaiku]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\r\nclient<llm> OpenaiFallback {\r\n  provider fallback\r\n  options {\r\n    // This will try the clients in order until one succeeds\r\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/retry\r\nretry_policy Constant {\r\n  max_retries 3\r\n  // Strategy is optional\r\n  strategy {\r\n    type constant_delay\r\n    delay_ms 200\r\n  }\r\n}\r\n\r\nretry_policy Exponential {\r\n  max_retries 2\r\n  // Strategy is optional\r\n  strategy {\r\n    type exponential_backoff\r\n    delay_ms 300\r\n    multiplier 1.5\r\n    max_delay_ms 10000\r\n  }\r\n}",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.202.1\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
}
export const getBamlFiles = () => {
    return fileMap;
}