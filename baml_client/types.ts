/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export enum AshleyAction {
  BookTime = "BookTime",
  SuggestTimes = "SuggestTimes",
  AskForClarification = "AskForClarification",
  NoAction = "NoAction",
}

export interface AshleyResponse {
  /**
   * The action Ashley should take
   */
  action: AshleyAction
  /**
   * Notes about any conflicts found in the calendar intent
   */
  conflict_notes: string
  /**
   * The email response Ashley should send to the requestor
   */
  email_response: string
  /**
   * Whether a calendar invite should be sent
   */
  send_calendar_invite: boolean
  /**
   * Subject line for the calendar invite (if applicable)
   */
  calendar_invite_subject: string
  /**
   * Meeting start time in YYYY-mm-dd hh:mm format (Pacific Time)
   */
  meeting_start_time: string
  /**
   * Meeting end time in YYYY-mm-dd hh:mm format (Pacific Time)
   */
  meeting_end_time: string
  /**
   * Meeting duration in minutes
   */
  meeting_duration_minutes: number
  /**
   * List of participants to invite (comma-separated email addresses)
   */
  participants_to_invite: string
  /**
   * Meeting description/agenda
   */
  meeting_description: string
  
}

export interface CalendarIntent {
  /**
   * Whether this message requires a calendar action
   */
  action_needed: boolean
  /**
   * Name of person who originally requested the meeting
   */
  requestor: string
  /**
   * Who needs to be included in the meeting - list of email addresses. Do not include Sid (sid.mathur@gmail.com)
   */
  participants: string
  /**
   * Who are the EAs and for who - email address of EA (email address of participant). Do not include Ashley (ashley.sidsai@gmail.com)
   */
  executive_assistants: string
  /**
   * Who are the silent observers - list of email addresses. 
   */
  silent_observers: string
  /**
   * The earliest datetime being considered for the meeting formatted as YYYY-mm-dd hh:mm
   */
  timerange_start: string
  /**
   * The latest datetime being considered for the meeting formatted as YYYY-mm-dd hh:mm
   */
  timerange_end: string
  /**
   * What the requestor is asking for
   */
  request_details: string
  
}
