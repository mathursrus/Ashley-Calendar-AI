/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type {  AshleyAction,  AshleyResponse,  CalendarIntent } from "./types"
import type * as types from "./types"

/******************************************************************************
*
*  These types are used for streaming, for when an instance of a type
*  is still being built up and any of its fields is not yet fully available.
*
******************************************************************************/

export interface StreamState<T> {
  value: T
  state: "Pending" | "Incomplete" | "Complete"
}

export namespace partial_types {
    export interface AshleyResponse {
      /**
       * The action Ashley should take
       */
      action?: types.AshleyAction | null
      /**
       * Notes about any conflicts found in the calendar intent
       */
      conflict_notes?: string | null
      /**
       * The email response Ashley should send to the requestor
       */
      email_response?: string | null
      /**
       * Whether a calendar invite should be sent
       */
      send_calendar_invite?: boolean | null
      /**
       * Subject line for the calendar invite (if applicable)
       */
      calendar_invite_subject?: string | null
      /**
       * Meeting start time in YYYY-mm-dd hh:mm format (Pacific Time)
       */
      meeting_start_time?: string | null
      /**
       * Meeting end time in YYYY-mm-dd hh:mm format (Pacific Time)
       */
      meeting_end_time?: string | null
      /**
       * Meeting duration in minutes
       */
      meeting_duration_minutes?: number | null
      /**
       * List of participants to invite (comma-separated email addresses)
       */
      participants_to_invite?: string | null
      /**
       * Meeting description/agenda
       */
      meeting_description?: string | null
    }
    export interface CalendarIntent {
      /**
       * Whether this message requires a calendar action
       */
      action_needed?: boolean | null
      /**
       * Name of person who originally requested the meeting
       */
      requestor?: string | null
      /**
       * Who needs to be included in the meeting - list of email addresses. Do not include Sid (sid.mathur@gmail.com)
       */
      participants?: string | null
      /**
       * Who are the EAs and for who - email address of EA (email address of participant). Do not include Ashley (ashley.sidsai@gmail.com)
       */
      executive_assistants?: string | null
      /**
       * Who are the silent observers - list of email addresses. 
       */
      silent_observers?: string | null
      /**
       * The earliest datetime being considered for the meeting formatted as YYYY-mm-dd hh:mm
       */
      timerange_start?: string | null
      /**
       * The latest datetime being considered for the meeting formatted as YYYY-mm-dd hh:mm
       */
      timerange_end?: string | null
      /**
       * What the requestor is asking for
       */
      request_details?: string | null
    }
}